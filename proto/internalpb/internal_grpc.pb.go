// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: internalpb/internal.proto

package internalpb

import (
	context "context"
	commonpb "gokv/proto/commonpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalServer_Heartbeat_FullMethodName      = "/internalpb.InternalServer/Heartbeat"
	InternalServer_ForwardCommand_FullMethodName = "/internalpb.InternalServer/ForwardCommand"
	InternalServer_Rebalance_FullMethodName      = "/internalpb.InternalServer/Rebalance"
)

// InternalServerClient is the client API for InternalServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalServerClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	ForwardCommand(ctx context.Context, in *commonpb.CommandRequest, opts ...grpc.CallOption) (*commonpb.CommandResponse, error)
	Rebalance(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RebalanceRequest, RebalanceResponse], error)
}

type internalServerClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalServerClient(cc grpc.ClientConnInterface) InternalServerClient {
	return &internalServerClient{cc}
}

func (c *internalServerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, InternalServer_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServerClient) ForwardCommand(ctx context.Context, in *commonpb.CommandRequest, opts ...grpc.CallOption) (*commonpb.CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.CommandResponse)
	err := c.cc.Invoke(ctx, InternalServer_ForwardCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServerClient) Rebalance(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RebalanceRequest, RebalanceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InternalServer_ServiceDesc.Streams[0], InternalServer_Rebalance_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RebalanceRequest, RebalanceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalServer_RebalanceClient = grpc.ClientStreamingClient[RebalanceRequest, RebalanceResponse]

// InternalServerServer is the server API for InternalServer service.
// All implementations must embed UnimplementedInternalServerServer
// for forward compatibility.
type InternalServerServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	ForwardCommand(context.Context, *commonpb.CommandRequest) (*commonpb.CommandResponse, error)
	Rebalance(grpc.ClientStreamingServer[RebalanceRequest, RebalanceResponse]) error
	mustEmbedUnimplementedInternalServerServer()
}

// UnimplementedInternalServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalServerServer struct{}

func (UnimplementedInternalServerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedInternalServerServer) ForwardCommand(context.Context, *commonpb.CommandRequest) (*commonpb.CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardCommand not implemented")
}
func (UnimplementedInternalServerServer) Rebalance(grpc.ClientStreamingServer[RebalanceRequest, RebalanceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Rebalance not implemented")
}
func (UnimplementedInternalServerServer) mustEmbedUnimplementedInternalServerServer() {}
func (UnimplementedInternalServerServer) testEmbeddedByValue()                        {}

// UnsafeInternalServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServerServer will
// result in compilation errors.
type UnsafeInternalServerServer interface {
	mustEmbedUnimplementedInternalServerServer()
}

func RegisterInternalServerServer(s grpc.ServiceRegistrar, srv InternalServerServer) {
	// If the following call pancis, it indicates UnimplementedInternalServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalServer_ServiceDesc, srv)
}

func _InternalServer_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalServer_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalServer_ForwardCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServerServer).ForwardCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalServer_ForwardCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServerServer).ForwardCommand(ctx, req.(*commonpb.CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalServer_Rebalance_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InternalServerServer).Rebalance(&grpc.GenericServerStream[RebalanceRequest, RebalanceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalServer_RebalanceServer = grpc.ClientStreamingServer[RebalanceRequest, RebalanceResponse]

// InternalServer_ServiceDesc is the grpc.ServiceDesc for InternalServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internalpb.InternalServer",
	HandlerType: (*InternalServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _InternalServer_Heartbeat_Handler,
		},
		{
			MethodName: "ForwardCommand",
			Handler:    _InternalServer_ForwardCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rebalance",
			Handler:       _InternalServer_Rebalance_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internalpb/internal.proto",
}
