// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: externalpb/external.proto

package externalpb

import (
	context "context"
	commonpb "gokv/proto/commonpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExternalServer_Healthcheck_FullMethodName   = "/externalpb.ExternalServer/Healthcheck"
	ExternalServer_RunCommand_FullMethodName    = "/externalpb.ExternalServer/RunCommand"
	ExternalServer_StreamCommand_FullMethodName = "/externalpb.ExternalServer/StreamCommand"
)

// ExternalServerClient is the client API for ExternalServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalServerClient interface {
	Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error)
	RunCommand(ctx context.Context, in *commonpb.CommandRequest, opts ...grpc.CallOption) (*commonpb.CommandResponse, error)
	StreamCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[commonpb.CommandRequest, commonpb.CommandResponse], error)
}

type externalServerClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalServerClient(cc grpc.ClientConnInterface) ExternalServerClient {
	return &externalServerClient{cc}
}

func (c *externalServerClient) Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthcheckResponse)
	err := c.cc.Invoke(ctx, ExternalServer_Healthcheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerClient) RunCommand(ctx context.Context, in *commonpb.CommandRequest, opts ...grpc.CallOption) (*commonpb.CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.CommandResponse)
	err := c.cc.Invoke(ctx, ExternalServer_RunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerClient) StreamCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[commonpb.CommandRequest, commonpb.CommandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExternalServer_ServiceDesc.Streams[0], ExternalServer_StreamCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[commonpb.CommandRequest, commonpb.CommandResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExternalServer_StreamCommandClient = grpc.BidiStreamingClient[commonpb.CommandRequest, commonpb.CommandResponse]

// ExternalServerServer is the server API for ExternalServer service.
// All implementations must embed UnimplementedExternalServerServer
// for forward compatibility.
type ExternalServerServer interface {
	Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
	RunCommand(context.Context, *commonpb.CommandRequest) (*commonpb.CommandResponse, error)
	StreamCommand(grpc.BidiStreamingServer[commonpb.CommandRequest, commonpb.CommandResponse]) error
	mustEmbedUnimplementedExternalServerServer()
}

// UnimplementedExternalServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalServerServer struct{}

func (UnimplementedExternalServerServer) Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedExternalServerServer) RunCommand(context.Context, *commonpb.CommandRequest) (*commonpb.CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (UnimplementedExternalServerServer) StreamCommand(grpc.BidiStreamingServer[commonpb.CommandRequest, commonpb.CommandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCommand not implemented")
}
func (UnimplementedExternalServerServer) mustEmbedUnimplementedExternalServerServer() {}
func (UnimplementedExternalServerServer) testEmbeddedByValue()                        {}

// UnsafeExternalServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalServerServer will
// result in compilation errors.
type UnsafeExternalServerServer interface {
	mustEmbedUnimplementedExternalServerServer()
}

func RegisterExternalServerServer(s grpc.ServiceRegistrar, srv ExternalServerServer) {
	// If the following call pancis, it indicates UnimplementedExternalServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalServer_ServiceDesc, srv)
}

func _ExternalServer_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalServer_Healthcheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServer).Healthcheck(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServer_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalServer_RunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServer).RunCommand(ctx, req.(*commonpb.CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServer_StreamCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExternalServerServer).StreamCommand(&grpc.GenericServerStream[commonpb.CommandRequest, commonpb.CommandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExternalServer_StreamCommandServer = grpc.BidiStreamingServer[commonpb.CommandRequest, commonpb.CommandResponse]

// ExternalServer_ServiceDesc is the grpc.ServiceDesc for ExternalServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "externalpb.ExternalServer",
	HandlerType: (*ExternalServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthcheck",
			Handler:    _ExternalServer_Healthcheck_Handler,
		},
		{
			MethodName: "RunCommand",
			Handler:    _ExternalServer_RunCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCommand",
			Handler:       _ExternalServer_StreamCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "externalpb/external.proto",
}
