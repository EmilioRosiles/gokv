// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.24.4
// source: commonpb/common.proto

package commonpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeAddr      string                 `protobuf:"bytes,2,opt,name=node_addr,json=nodeAddr,proto3" json:"node_addr,omitempty"`
	Alive         bool                   `protobuf:"varint,3,opt,name=alive,proto3" json:"alive,omitempty"`
	LastSeen      int64                  `protobuf:"varint,4,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_commonpb_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_commonpb_common_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Node) GetNodeAddr() string {
	if x != nil {
		return x.NodeAddr
	}
	return ""
}

func (x *Node) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *Node) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

type KeyValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_commonpb_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_commonpb_common_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KeyValueList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*KeyValue            `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	mi := &file_commonpb_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueList.ProtoReflect.Descriptor instead.
func (*KeyValueList) Descriptor() ([]byte, []int) {
	return file_commonpb_common_proto_rawDescGZIP(), []int{2}
}

func (x *KeyValueList) GetList() []*KeyValue {
	if x != nil {
		return x.List
	}
	return nil
}

type KeyValueMap struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Map           map[string]*KeyValueList `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueMap) Reset() {
	*x = KeyValueMap{}
	mi := &file_commonpb_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueMap) ProtoMessage() {}

func (x *KeyValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueMap.ProtoReflect.Descriptor instead.
func (*KeyValueMap) Descriptor() ([]byte, []int) {
	return file_commonpb_common_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValueMap) GetMap() map[string]*KeyValueList {
	if x != nil {
		return x.Map
	}
	return nil
}

type CommandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Args          [][]byte               `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	mi := &file_commonpb_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_commonpb_common_proto_rawDescGZIP(), []int{4}
}

func (x *CommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CommandRequest) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type CommandResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*CommandResponse_Value
	//	*CommandResponse_Success
	//	*CommandResponse_Count
	//	*CommandResponse_List
	//	*CommandResponse_Map
	Response      isCommandResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	mi := &file_commonpb_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_commonpb_common_proto_rawDescGZIP(), []int{5}
}

func (x *CommandResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CommandResponse) GetResponse() isCommandResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CommandResponse) GetValue() []byte {
	if x != nil {
		if x, ok := x.Response.(*CommandResponse_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *CommandResponse) GetSuccess() bool {
	if x != nil {
		if x, ok := x.Response.(*CommandResponse_Success); ok {
			return x.Success
		}
	}
	return false
}

func (x *CommandResponse) GetCount() int64 {
	if x != nil {
		if x, ok := x.Response.(*CommandResponse_Count); ok {
			return x.Count
		}
	}
	return 0
}

func (x *CommandResponse) GetList() *KeyValueList {
	if x != nil {
		if x, ok := x.Response.(*CommandResponse_List); ok {
			return x.List
		}
	}
	return nil
}

func (x *CommandResponse) GetMap() *KeyValueMap {
	if x != nil {
		if x, ok := x.Response.(*CommandResponse_Map); ok {
			return x.Map
		}
	}
	return nil
}

type isCommandResponse_Response interface {
	isCommandResponse_Response()
}

type CommandResponse_Value struct {
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3,oneof"` // For single value responses (e.g., `HGET hash field`)
}

type CommandResponse_Success struct {
	Success bool `protobuf:"varint,3,opt,name=success,proto3,oneof"` // For simple ack responses (e.g. `HSET`)
}

type CommandResponse_Count struct {
	Count int64 `protobuf:"varint,4,opt,name=count,proto3,oneof"` // For counts (e.g. `HDEL`)
}

type CommandResponse_List struct {
	List *KeyValueList `protobuf:"bytes,5,opt,name=list,proto3,oneof"` // For key/value lists (e.g., `HGET hash` or `HGET hash field1 field2` )
}

type CommandResponse_Map struct {
	Map *KeyValueMap `protobuf:"bytes,6,opt,name=map,proto3,oneof"` // For key/value maps
}

func (*CommandResponse_Value) isCommandResponse_Response() {}

func (*CommandResponse_Success) isCommandResponse_Response() {}

func (*CommandResponse_Count) isCommandResponse_Response() {}

func (*CommandResponse_List) isCommandResponse_Response() {}

func (*CommandResponse_Map) isCommandResponse_Response() {}

var File_commonpb_common_proto protoreflect.FileDescriptor

const file_commonpb_common_proto_rawDesc = "" +
	"\n" +
	"\x15commonpb/common.proto\x12\bcommonpb\"o\n" +
	"\x04Node\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tnode_addr\x18\x02 \x01(\tR\bnodeAddr\x12\x14\n" +
	"\x05alive\x18\x03 \x01(\bR\x05alive\x12\x1b\n" +
	"\tlast_seen\x18\x04 \x01(\x03R\blastSeen\"2\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\"6\n" +
	"\fKeyValueList\x12&\n" +
	"\x04list\x18\x01 \x03(\v2\x12.commonpb.KeyValueR\x04list\"\x8f\x01\n" +
	"\vKeyValueMap\x120\n" +
	"\x03map\x18\x01 \x03(\v2\x1e.commonpb.KeyValueMap.MapEntryR\x03map\x1aN\n" +
	"\bMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.commonpb.KeyValueListR\x05value:\x028\x01\"P\n" +
	"\x0eCommandRequest\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x12\n" +
	"\x04args\x18\x03 \x03(\fR\x04args\"\xd8\x01\n" +
	"\x0fCommandResponse\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\x12\x16\n" +
	"\x05value\x18\x02 \x01(\fH\x00R\x05value\x12\x1a\n" +
	"\asuccess\x18\x03 \x01(\bH\x00R\asuccess\x12\x16\n" +
	"\x05count\x18\x04 \x01(\x03H\x00R\x05count\x12,\n" +
	"\x04list\x18\x05 \x01(\v2\x16.commonpb.KeyValueListH\x00R\x04list\x12)\n" +
	"\x03map\x18\x06 \x01(\v2\x15.commonpb.KeyValueMapH\x00R\x03mapB\n" +
	"\n" +
	"\bresponseB\x1eZ\x1cgokv/proto/commonpb;commonpbb\x06proto3"

var (
	file_commonpb_common_proto_rawDescOnce sync.Once
	file_commonpb_common_proto_rawDescData []byte
)

func file_commonpb_common_proto_rawDescGZIP() []byte {
	file_commonpb_common_proto_rawDescOnce.Do(func() {
		file_commonpb_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_commonpb_common_proto_rawDesc), len(file_commonpb_common_proto_rawDesc)))
	})
	return file_commonpb_common_proto_rawDescData
}

var file_commonpb_common_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_commonpb_common_proto_goTypes = []any{
	(*Node)(nil),            // 0: commonpb.Node
	(*KeyValue)(nil),        // 1: commonpb.KeyValue
	(*KeyValueList)(nil),    // 2: commonpb.KeyValueList
	(*KeyValueMap)(nil),     // 3: commonpb.KeyValueMap
	(*CommandRequest)(nil),  // 4: commonpb.CommandRequest
	(*CommandResponse)(nil), // 5: commonpb.CommandResponse
	nil,                     // 6: commonpb.KeyValueMap.MapEntry
}
var file_commonpb_common_proto_depIdxs = []int32{
	1, // 0: commonpb.KeyValueList.list:type_name -> commonpb.KeyValue
	6, // 1: commonpb.KeyValueMap.map:type_name -> commonpb.KeyValueMap.MapEntry
	2, // 2: commonpb.CommandResponse.list:type_name -> commonpb.KeyValueList
	3, // 3: commonpb.CommandResponse.map:type_name -> commonpb.KeyValueMap
	2, // 4: commonpb.KeyValueMap.MapEntry.value:type_name -> commonpb.KeyValueList
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_commonpb_common_proto_init() }
func file_commonpb_common_proto_init() {
	if File_commonpb_common_proto != nil {
		return
	}
	file_commonpb_common_proto_msgTypes[5].OneofWrappers = []any{
		(*CommandResponse_Value)(nil),
		(*CommandResponse_Success)(nil),
		(*CommandResponse_Count)(nil),
		(*CommandResponse_List)(nil),
		(*CommandResponse_Map)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_commonpb_common_proto_rawDesc), len(file_commonpb_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commonpb_common_proto_goTypes,
		DependencyIndexes: file_commonpb_common_proto_depIdxs,
		MessageInfos:      file_commonpb_common_proto_msgTypes,
	}.Build()
	File_commonpb_common_proto = out.File
	file_commonpb_common_proto_goTypes = nil
	file_commonpb_common_proto_depIdxs = nil
}
